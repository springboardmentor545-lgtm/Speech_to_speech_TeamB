user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    # use epoll; # epoll is default on Linux, uncomment if needed
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 100M; # Increase max upload size for Nginx

    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # Define the upstream server (FastAPI backend)
    upstream backend {
        # Assumes the backend service is named 'backend' in Docker Compose or Kubernetes
        server backend:8000;
        keepalive 32; # Keep connections open for better performance
    }

    server {
        listen 80;
        server_name localhost; # Adjust if needed for production domain
        root /usr/share/nginx/html;
        index index.html;

        # Serve static files directly
        location / {
            try_files $uri $uri/ /index.html;
            # Disable caching for index.html to ensure users get the latest SPA version
            if ($uri = '/index.html') {
                add_header Cache-Control "no-cache, no-store, must-revalidate";
            }
        }

        # Proxy API requests to the backend
        location /api/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
            proxy_read_timeout 300s; # Increase timeout for potentially long uploads/processing
            proxy_connect_timeout 75s;
        }

        # Proxy WebSocket connections to the backend
        location /ws/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_read_timeout 86400s; # Very long timeout for persistent WebSocket
            proxy_send_timeout 86400s;
        }

        # Basic health check endpoint for Nginx itself
        location = /nginx_health {
            access_log off;
            return 200 "healthy
";
            add_header Content-Type text/plain;
        }

        # Cache control for static assets (JS, CSS, images, fonts)
        location ~* \.(?:css|js|map|jpe?g|png|gif|ico|svg|webp|woff2?|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            access_log off; # Reduce log noise
        }
    }

    # Optional: Add server block for HTTPS (port 443) if needed
    # server {
    #     listen 443 ssl http2;
    #     server_name yourdomain.com;
    #
    #     ssl_certificate /etc/nginx/certs/yourdomain.com.crt;
    #     ssl_certificate_key /etc/nginx/certs/yourdomain.com.key;
    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
    #
    #     # Include security headers, HSTS, etc.
    #
    #     # Same location blocks as above, possibly with added security headers
    #     location / { ... }
    #     location /api/ { ... }
    #     location /ws/ { ... }
    # }
}
