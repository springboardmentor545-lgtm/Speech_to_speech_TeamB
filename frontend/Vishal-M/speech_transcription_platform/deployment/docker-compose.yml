services:
  postgres:
    image: postgres:15-alpine
    container_name: speech-transcription-db
    environment:
      POSTGRES_DB: transcription_db
      POSTGRES_USER: transcription_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-change_in_production}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U transcription_user"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - speech-network

  backend:
    build:
      context: ../backend
      dockerfile: Dockerfile
    container_name: speech-transcription-api
    environment:
      DATABASE_URL: postgresql://transcription_user:${DB_PASSWORD:-change_in_production}@postgres:5432/transcription_db
      SPEECH_KEY: ${SPEECH_KEY}
      SERVICE_REGION: ${SERVICE_REGION}
      ENVIRONMENT: production
      DEBUG: "false"
      LOG_LEVEL: INFO
      CORS_ORIGINS: ${CORS_ORIGINS:-http://localhost:80,http://localhost:443,https://yourdomain.com} # Added default localhost ports
      SECRET_KEY: ${SECRET_KEY:-prod-secret-needs-change} # Add SECRET_KEY
    volumes:
      - ./backend/temp_audio:/app/temp_audio
      - ./backend/logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - speech-network

  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: speech-transcription-ui
    ports:
      - "80:80" # Map host port 80 to container port 80
      - "443:443" # Optional: Map host port 443 if using HTTPS in Nginx
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - speech-network

  # Optional Redis for caching or rate limiting state if needed
  # redis:
  #   image: redis:7-alpine
  #   container_name: speech-transcription-cache
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_data:/data
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #   restart: unless-stopped
  #   networks:
  #     - speech-network

volumes:
  postgres_data: {}
  # redis_data: {}

networks:
  speech-network:
    driver: bridge
